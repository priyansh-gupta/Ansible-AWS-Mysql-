####################################################
##Author: Almir Candido                            #
##Contact: https://br.linkedin.com/in/almircandido #
##                                                 #
##Ansible Version: 2.8                             #
##                                                 #
##Requisitos:                                      #
##Install:                                         #
##python-boto                                      #
##python-boto3                                     #
####################################################
# This Playbook create keypair, security group, ec2 instance and install httpd and start service create and format EBS volume for web site directory.
---
- hosts: localhost
  gather_facts: no
  vars:
    
    AWS_ACCESS_KEY: Inform your access key
    AWS_SECRET_KEY: Inform your secret key
    AWS_REGION: us-east-1  #N. Virginia
    AWS_ZONE: us-east-1a
    BASE_AMI: ami-0c322300a1dd5dc79 #RHEL 8
    DEFAULT_VPC_SUBNET: subnet-b5cd84d2
    DEVICE_NAME: /dev/xvdf
    KEY_NAME: ansible_ssh_keypair
    PATH: /home/ansible/
    SG_NAME: allow_access
    VPC_ID: vpc-89abcef3
    VOL_SIZE: '2'
    VOL_NAME: web_volume
    INSTANCE_TYPE: t2.micro
  tasks:
    - name: Creata key pair
      ec2_key:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        name: "{{ KEY_NAME }}"
      register: keypair
    - name: Save keypair
      lineinfile:
        create: yes
        path: "{{ PATH }}{{ KEY_NAME }}.pem"
        line: "{{ keypair.key.private_key }}"
        mode: 0600
      
    - name: Create Security Group
      ec2_group:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        name: "{{ SG_NAME }}"
        description: ACCESS_WEB
        vpc_id: "{{ VPC_ID }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
              - 22
            cidr_ip: 0.0.0.0/0
    
    - name: Create new EBS volume
      ec2_vol:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        volume_size: "{{ VOL_SIZE }}"
        name: "{{ VOL_NAME }}"
        device_name: "{{ DEVICE_NAME }}"
      register: vol_info   
     
    - name: Create New EC2 Instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        instance_type: "{{ INSTANCE_TYPE }}"
        keypair: "{{ KEY_NAME }}"
        group: "{{ SG_NAME }}"
        image: "{{ BASE_AMI }}"
        assign_public_ip: yes
        vpc_subnet_id: '{{ DEFAULT_VPC_SUBNET }}'
        wait: true
        count: 1
        instance_tags:
          Name: Web_Server
      register: ec2

    - name: Attach Volume
      ec2_vol:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        instance: "{{ ec2.instances[0].id }}"
        id: "{{ vol_info.volume_id }}"
        device_name: "{{ DEVICE_NAME }}"
        delete_on_termination: no
    
    - name: Add host inventory
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: web
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_ssh_private_key_file: "{{ PATH }}{{ KEY_NAME }}.pem"
      loop: "{{ ec2.instances }}"

    - name: Wait for ssh to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 6
        timeout: 90
      loop: "{{ ec2.instances }}"

## Configure Instance ##
- hosts: web
  become: yes
  gather_facts: no
  remote_user: ec2-user
  vars:
    DEVICE_NAME: /dev/xvdf
    PACKAGES:
      - httpd
      - mod_ssl
  tasks:
    - name: Create New partition 
      parted:
        device: "{{ DEVICE_NAME }}"
        number: 1
        state: present
      register: parted_output

    - name: Format new partition
      filesystem:
        fstype: xfs
        dev: "{{ DEVICE_NAME }}1"

    - name: Mount web content volume
      mount:
        path: /var/www/html/
        src: "{{ DEVICE_NAME }}1"
        fstype: xfs
        state: mounted

    - name: install {{ PACKAGES }}
      yum:
        name: "{{ PACKAGES }}"   
        state: latest
    - name: Start httpd service
      service:
        name: httpd
        state: started
        enabled: true
... 
